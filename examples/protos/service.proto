syntax = "proto3";

package service;

// Define the request and response message structures for each RPC method.
// You will need to fill in the actual structure of these messages based on your application's requirements.

message AudioConfig {
  int32 sample_rate_hertz = 1;
  bool disable_audio = 2;
  bool enable_facial_data = 3;
}

message TriggerConfig {
  string trigger_message = 1;
}

message ActionConfig {
  message Character {
    string name = 1;
    string bio = 2;
  }

  message Object {
    string name = 1;
    string description = 2;
  }

  repeated string actions = 1;
  repeated Character characters = 2;
  repeated Object objects = 3;
  string classification = 4;
  int32 context_level = 5;
  string current_attention_object = 6;
}

message STTRequest {
  oneof request_type {
    AudioConfig audio_config = 1;
    bytes audio_chunk = 2;
  }
}

message STTResponse {
  string text = 1;  
}

message GetResponseRequest {
  message GetResponseConfig {
    string character_id = 2;
    string api_key = 3;
    string session_id = 4;
    AudioConfig audio_config = 5;
    ActionConfig action_config = 6;
    string speaker = 7;
    string language_code = 8;
  }

  message GetResponseData {
    oneof input_type {
      bytes audio_data = 1;
      string text_data = 2;
      TriggerConfig trigger_data = 3;
    }
  }

  oneof request_type {
    GetResponseConfig get_response_config = 1;
    GetResponseData get_response_data = 2;
  }
}

message GetResponseResponse {
  message AudioResponse {
    bytes audio_data = 1;
    AudioConfig audio_config = 2;
    string text_data = 3;
    bool end_of_response = 4;
    string face_data = 5;
  }

  message ActionResponse {
    string action = 1;
  }

  message BehaviorTreeResponse {
    string bt_code = 1;
    string bt_constants = 2;
    string narrative_section_id = 3;
    // Other fields...
  }

  message UserTranscript {
    string text_data = 1;
    bool is_final = 2;
    bool end_of_response = 3;
  }

  string session_id = 1;

  oneof response_type {
    ActionResponse action_response = 2;
    AudioResponse audio_response = 3;
    string debug_log = 4;
    UserTranscript user_query = 5;
    BehaviorTreeResponse bt_response = 6;
  }
}

message GetResponseRequestSingle {
  GetResponseRequest response_config = 1;
  GetResponseRequest response_data = 2;
}

message HelloRequest {
  string name = 1;
}

message HelloResponse {
  string message = 1;
}

// pasted  upto line 6405 of .pb.cc to GPT -- start after that

// Define the service with its RPC methods.
service ConvaiService {
  // Unary RPC
  rpc Hello (HelloRequest) returns (HelloResponse);

  // Bidirectional streaming RPC
  rpc HelloStream (stream HelloRequest) returns (stream HelloResponse);

  // Bidirectional streaming RPC
  rpc SpeechToText (stream STTRequest) returns (stream STTResponse);

  // Bidirectional streaming RPC
  rpc GetResponse (stream GetResponseRequest) returns (stream GetResponseResponse);

  // Server streaming RPC
  rpc GetResponseSingle (GetResponseRequestSingle) returns (stream GetResponseResponse);
}