syntax = "proto3";

package service;

// Define the request and response message structures for each RPC method.
// You will need to fill in the actual structure of these messages based on your application's requirements.

message AudioConfig {
  // Fields inferred from the C++ code
  int32 sample_rate_hertz = 1;  // Example field, actual type and field number might be different
  bool disable_audio = 2;
  bool enable_facial_data = 3;
}

message TriggerConfig {
  string trigger_message = 1;  // Example field
}

message ActionConfig_Character {
  string name = 1;
  string bio = 2;
}

message ActionConfig_Object {
  string name = 1;
  string description = 2;
}

message ActionConfig {
  // Repeated or map fields for actions, characters, objects might be needed
  repeated string actions = 1;
  repeated ActionConfig_Character characters = 2;
  repeated ActionConfig_Object objects = 3;
  string classification = 4;
  int32 context_level = 5;
  string current_attention_object = 6;
}

message STTRequest {
  oneof request_type {
    AudioConfig audio_config = 1;
    bytes audio_chunk = 2;
  }
}

message STTResponse {
  string text = 1;  
}

message GetResponseRequest_GetResponseConfig {
  string character_id = 1;  //GPT says might need to start from 2 instead of 1
  string api_key = 2;
  string session_id = 3;
  AudioConfig audio_config = 4;
  ActionConfig action_config = 5;
  string speaker = 6;
  string language_code = 7;
}

message GetResponseRequest_GetResponseData {
  oneof input_type {
    bytes audio_data = 1;
    string text_data = 2;
    TriggerConfig trigger_data = 3;
  }
}

message GetResponseRequest {
  oneof request_type {
    GetResponseRequest_GetResponseConfig get_response_config = 1;
    GetResponseRequest_GetResponseData get_response_data = 2;
  }
}

message GetResponseRequestSingle {
  GetResponseRequest response_config = 1;
  GetResponseRequest response_data = 2;
}

message GetResponseResponse_AudioResponse {
  bytes audio_data = 1;
  AudioConfig audio_config = 2;
  string text_data = 3;
  bool end_of_response = 4;
  string face_data = 5;
}

message GetResponseResponse_ActionResponse {
  string action = 1;
}

message GetResponseResponse_BehaviorTreeResponse {
  string bt_code = 1;
  string bt_constants = 2;
  string narrative_section_id = 3;
  // Other fields...
}

message GetResponseResponse_UserTranscript {
  string text_data = 1;
  bool is_final = 2;
  bool end_of_response = 3;
}

message GetResponseResponse {
  string session_id = 1;

  oneof response_type {
    GetResponseResponse_ActionResponse action_response = 2;
    GetResponseResponse_AudioResponse audio_response = 3;
    string debug_log = 4;
    GetResponseResponse_UserTranscript user_query = 5;
    GetResponseResponse_BehaviorTreeResponse bt_response = 6;
  }
}

message HelloRequest {
  string name = 1;
}

message HelloResponse {
  string message = 1;
}
// pasted  upto line 6405 of .pb.cc to GPT -- start after that

// Define the service with its RPC methods.
service ConvaiService {
  // Unary RPC
  rpc Hello (HelloRequest) returns (HelloResponse);

  // Bidirectional streaming RPC
  rpc HelloStream (stream HelloRequest) returns (stream HelloResponse);

  // Bidirectional streaming RPC
  rpc SpeechToText (stream STTRequest) returns (stream STTResponse);

  // Bidirectional streaming RPC
  rpc GetResponse (stream GetResponseRequest) returns (stream GetResponseResponse);

  // Server streaming RPC
  rpc GetResponseSingle (GetResponseRequestSingle) returns (stream GetResponseResponse);
}